package com.materiel.suite.client.ui.interventions;

import com.materiel.suite.client.model.BillingLine;

import javax.swing.table.AbstractTableModel;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class BillingTableModel extends AbstractTableModel {
  private static final String[] COLUMNS = {"Auto", "Désignation", "Qté", "Unité", "PU HT", "Total HT"};
  private static final Class<?>[] TYPES = {Boolean.class, String.class, BigDecimal.class, String.class, BigDecimal.class, BigDecimal.class};

  private final List<BillingLine> rows = new ArrayList<>();

  @Override public int getRowCount(){ return rows.size(); }
  @Override public int getColumnCount(){ return COLUMNS.length; }
  @Override public String getColumnName(int column){ return COLUMNS[column]; }
  @Override public Class<?> getColumnClass(int columnIndex){ return TYPES[columnIndex]; }

  @Override public boolean isCellEditable(int rowIndex, int columnIndex){
    if (rowIndex < 0 || rowIndex >= rows.size()){
      return false;
    }
    if (columnIndex == 0 || columnIndex == 5){
      return false;
    }
    BillingLine line = rows.get(rowIndex);
    if (line == null){
      return false;
    }
    if (line.isAutoGenerated()){
      return columnIndex == 2;
    }
    return true;
  }

  @Override public Object getValueAt(int rowIndex, int columnIndex){
    if (rowIndex < 0 || rowIndex >= rows.size()){
      return null;
    }
    BillingLine line = rows.get(rowIndex);
    if (line == null){
      return null;
    }
    return switch (columnIndex){
      case 0 -> line.isAutoGenerated();
      case 1 -> line.getDesignation();
      case 2 -> line.getQuantity();
      case 3 -> line.getUnit();
      case 4 -> line.getUnitPriceHt();
      case 5 -> line.getTotalHt();
      default -> null;
    };
  }

  @Override public void setValueAt(Object aValue, int rowIndex, int columnIndex){
    if (rowIndex < 0 || rowIndex >= rows.size()){
      return;
    }
    BillingLine line = rows.get(rowIndex);
    if (line == null){
      return;
    }
    switch (columnIndex){
      case 1 -> line.setDesignation(aValue != null ? aValue.toString() : "");
      case 2 -> line.setQuantity(parseDecimal(aValue, line.getQuantity(), BigDecimal.ONE));
      case 3 -> line.setUnit(aValue != null ? aValue.toString() : "");
      case 4 -> line.setUnitPriceHt(parseDecimal(aValue, line.getUnitPriceHt(), BigDecimal.ZERO));
      default -> { return; }
    }
    normalize(line);
    fireTableRowsUpdated(rowIndex, rowIndex);
  }

  void setLines(List<BillingLine> lines){
    rows.clear();
    if (lines != null){
      for (BillingLine line : lines){
        BillingLine copy = copy(line);
        if (copy != null){
          normalize(copy);
          rows.add(copy);
        }
      }
    }
    fireTableDataChanged();
  }

  List<BillingLine> getLines(){
    List<BillingLine> list = new ArrayList<>();
    for (BillingLine line : rows){
      BillingLine copy = copy(line);
      if (copy != null){
        list.add(copy);
      }
    }
    return list;
  }

  void addLine(BillingLine line){
    BillingLine copy = copy(line);
    if (copy == null){
      return;
    }
    normalize(copy);
    rows.add(copy);
    int index = rows.size() - 1;
    fireTableRowsInserted(index, index);
  }

  void remove(int row){
    if (row < 0 || row >= rows.size()){
      return;
    }
    rows.remove(row);
    fireTableRowsDeleted(row, row);
  }

  void recalcAll(){
    if (rows.isEmpty()){
      return;
    }
    for (BillingLine line : rows){
      normalize(line);
    }
    fireTableRowsUpdated(0, rows.size() - 1);
  }

  BigDecimal totalHt(){
    BigDecimal total = BigDecimal.ZERO;
    for (BillingLine line : rows){
      if (line == null){
        continue;
      }
      BigDecimal value = line.getTotalHt();
      if (value != null){
        total = total.add(value);
      }
    }
    return total;
  }

  private void normalize(BillingLine line){
    if (line == null){
      return;
    }
    BigDecimal quantity = line.getQuantity();
    if (quantity == null){
      quantity = BigDecimal.ONE;
    }
    BigDecimal unitPrice = line.getUnitPriceHt();
    if (unitPrice == null){
      unitPrice = BigDecimal.ZERO;
    }
    if (line.getUnit() == null || line.getUnit().isBlank()){
      line.setUnit("u");
    }
    line.setQuantity(quantity);
    line.setUnitPriceHt(unitPrice);
    line.setTotalHt(unitPrice.multiply(quantity));
  }

  private BigDecimal parseDecimal(Object value, BigDecimal previous, BigDecimal fallback){
    if (value == null){
      return previous != null ? previous : fallback;
    }
    if (value instanceof BigDecimal bd){
      return bd;
    }
    if (value instanceof Number number){
      return BigDecimal.valueOf(number.doubleValue());
    }
    String text = value.toString();
    if (text == null){
      return previous != null ? previous : fallback;
    }
    text = text.trim();
    if (text.isEmpty()){
      return fallback;
    }
    text = text.replace(',', '.');
    try {
      return new BigDecimal(text);
    } catch (NumberFormatException ex){
      return previous != null ? previous : fallback;
    }
  }

  private BillingLine copy(BillingLine src){
    if (src == null){
      return null;
    }
    BillingLine copy = new BillingLine();
    copy.setId(src.getId());
    copy.setResourceId(src.getResourceId());
    copy.setDesignation(src.getDesignation());
    copy.setQuantity(src.getQuantity());
    copy.setUnit(src.getUnit());
    copy.setUnitPriceHt(src.getUnitPriceHt());
    copy.setTotalHt(src.getTotalHt());
    copy.setAutoGenerated(src.isAutoGenerated());
    return copy;
  }
}
