package com.materiel.suite.client.ui.interventions;

import com.materiel.suite.client.model.BillingLine;
import com.materiel.suite.client.model.Resource;
import com.materiel.suite.client.model.ResourceRef;
import com.materiel.suite.client.model.ResourceType;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;

/** Utilitaires pour générer rapidement des lignes de pré-devis depuis des ressources. */
public final class PreDevisUtil {
  private static final BigDecimal QUARTER = new BigDecimal("0.25");

  private PreDevisUtil(){
  }

  public static List<BillingLine> fromResources(List<Resource> resources){
    return fromResourcesWithWindow(resources, null, null);
  }

  public static List<BillingLine> fromResourcesWithWindow(List<Resource> resources, Date start, Date end){
    ArrayList<BillingLine> out = new ArrayList<>();
    if (resources == null){
      return out;
    }
    for (Resource resource : resources){
      if (resource == null){
        continue;
      }
      out.add(fromResource(resource, start, end));
    }
    return out;
  }

  public static List<BillingLine> fromResourceRefs(List<ResourceRef> refs, Map<UUID, Resource> catalog){
    ArrayList<BillingLine> out = new ArrayList<>();
    if (refs == null){
      return out;
    }
    for (ResourceRef ref : refs){
      if (ref == null){
        continue;
      }
      Resource resource = ref.getId() != null && catalog != null ? catalog.get(ref.getId()) : null;
      BillingLine line;
      if (resource != null){
        line = fromResource(resource, null, null);
        if (ref.getName() != null && !ref.getName().isBlank()){
          line.setDesignation(ref.getName());
        }
      } else {
        line = new BillingLine();
        line.setId(UUID.randomUUID().toString());
        line.setAutoGenerated(true);
        if (ref.getId() != null){
          line.setResourceId(ref.getId().toString());
        }
        line.setDesignation(ref.getName() != null && !ref.getName().isBlank() ? ref.getName() : "Ressource");
        line.setUnit("u");
        line.setQuantity(BigDecimal.ONE);
        line.setUnitPriceHt(BigDecimal.ZERO);
        line.setTotalHt(BigDecimal.ZERO);
      }
      out.add(line);
    }
    return out;
  }

  public static Inferred inferUnitAndQty(Resource resource, Date start, Date end){
    String unit = "u";
    BigDecimal quantity = BigDecimal.ONE;
    boolean hourly = isHourlyResource(resource);
    if (hourly){
      unit = "h";
      if (start != null && end != null && end.after(start)){
        quantity = computeRoundedHours(start, end);
      }
    }
    return new Inferred(unit, quantity);
  }

  public static BigDecimal computeRoundedHours(Date start, Date end){
    if (start == null || end == null || !end.after(start)){
      return BigDecimal.ONE;
    }
    long millis = end.getTime() - start.getTime();
    BigDecimal hours = BigDecimal.valueOf(millis).divide(BigDecimal.valueOf(3_600_000L), 4, RoundingMode.HALF_UP);
    BigDecimal rounded = hours.divide(QUARTER, 0, RoundingMode.UP).multiply(QUARTER);
    if (rounded.compareTo(BigDecimal.ONE) < 0){
      rounded = BigDecimal.ONE;
    }
    return rounded;
  }

  public record Inferred(String unit, BigDecimal quantity){}

  private static BillingLine fromResource(Resource resource, Date start, Date end){
    BillingLine line = new BillingLine();
    line.setId(UUID.randomUUID().toString());
    line.setAutoGenerated(true);
    if (resource.getId() != null){
      line.setResourceId(resource.getId().toString());
    }
    String designation = resource.getName();
    line.setDesignation(designation != null && !designation.isBlank() ? designation : "Ressource");
    Inferred inferred = inferUnitAndQty(resource, start, end);
    line.setUnit(inferred.unit());
    line.setQuantity(inferred.quantity());
    BigDecimal price = resource.getUnitPriceHt();
    if (price == null){
      price = BigDecimal.ZERO;
    }
    line.setUnitPriceHt(price);
    line.setTotalHt(price.multiply(line.getQuantity()));
    return line;
  }

  private static boolean isHourlyResource(Resource resource){
    if (resource == null){
      return false;
    }
    String descriptor = null;
    ResourceType type = resource.getType();
    if (type != null){
      descriptor = type.getName();
      if (descriptor == null || descriptor.isBlank()){
        descriptor = type.getLabel();
      }
    }
    if (descriptor == null || descriptor.isBlank()){
      descriptor = resource.getName();
    }
    if (descriptor == null){
      return false;
    }
    String lower = descriptor.toLowerCase(Locale.ROOT);
    return lower.contains("grue")
        || lower.contains("crane")
        || lower.contains("camion")
        || lower.contains("truck")
        || lower.contains("chariot")
        || lower.contains("forklift");
  }
}
