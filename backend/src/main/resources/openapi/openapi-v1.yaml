openapi: 3.0.3
info:
  title: Gestion Mat√©riel API
  version: "1.0.0"
servers:
  - url: /api/v1
paths:
  /clients:
    get: { summary: List clients, responses: { "200": { description: OK, content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/Client" } } } } } } }
    post: { summary: Create client, requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Client" } } } }, responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Client" } } } } } }
  /clients/{id}:
    get: { summary: Get client, parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ], responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Client" } } } } } }
    put: { summary: Update client, parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Client" } } } }, responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Client" } } } } } }
    delete: { summary: Delete client, parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ], responses: { "204": { description: No Content } } }
  /clients/{id}/contacts:
    get: { summary: List contacts for client, parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ], responses: { "200": { description: OK, content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/Contact" } } } } } } }
    post: { summary: Create contact, parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Contact" } } } }, responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Contact" } } } } } }
  /clients/{id}/contacts/{contactId}:
    put: { summary: Update contact, parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } }, { in: path, name: contactId, required: true, schema: { type: string, format: uuid } } ], requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Contact" } } } }, responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Contact" } } } } } }
    delete: { summary: Delete contact, parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } }, { in: path, name: contactId, required: true, schema: { type: string, format: uuid } } ], responses: { "204": { description: No Content } } }
  /resources:
    get: { summary: List resources, responses: { "200": { description: OK, content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/Resource" } } } } } } }
    post:
      summary: Create resource
      requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Resource" } } } }
      responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Resource" } } } } }
  /resources/{id}:
    put:
      summary: Update resource
      parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Resource" } } } }
      responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Resource" } } } } }
    delete:
      summary: Delete resource
      parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ]
      responses: { "204": { description: No Content } }
  /interventions:
    get:
      summary: List interventions in range
      parameters:
        - { in: query, name: from, required: true, schema: { type: string, format: date } }
        - { in: query, name: to, required: true, schema: { type: string, format: date } }
      responses: { "200": { description: OK, content: { application/json: { schema: { type: array, items: { $ref: "#/components/schemas/Intervention" } } } } } }
    post:
      summary: Create intervention
      requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Intervention" } } } }
      responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Intervention" } } } } }
  /interventions/validate:
    post:
      summary: Validate intervention and return suggestions
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Intervention" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  suggestions:
                    type: array
                    items:
                      type: object
                      properties:
                        resourceId: { type: string, format: uuid }
                        startDateTime: { type: string, format: date-time }
                        endDateTime: { type: string, format: date-time }
                        label: { type: string }
  /interventions/{id}:
    put:
      summary: Update intervention
      parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ]
      requestBody: { required: true, content: { application/json: { schema: { $ref: "#/components/schemas/Intervention" } } } }
      responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Intervention" } } } } }
    delete:
      summary: Delete intervention
      parameters: [ { in: path, name: id, required: true, schema: { type: string, format: uuid } } ]
      responses: { "204": { description: No Content } }
  /interventions/{id}/duplicate:
    post:
      summary: Duplicate intervention by N days
      parameters:
        - { in: path, name: id, required: true, schema: { type: string, format: uuid } }
        - { in: query, name: days, required: false, schema: { type: integer, default: 7 } }
      responses: { "200": { description: OK, content: { application/json: { schema: { $ref: "#/components/schemas/Intervention" } } } } }
  /webhooks:
    post:
      summary: Register webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url: { type: string, format: uri }
              required: [url]
      responses:
        "204": { description: No Content }
    delete:
      summary: Unregister webhook
      parameters:
        - in: query
          name: url
          required: true
          schema: { type: string, format: uri }
      responses:
        "204": { description: No Content }
    get:
      summary: List webhooks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
  /quotes:
    get:
      summary: List quotes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Quote" }
    post:
      summary: Create quote
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Quote" }
      responses:
        "201":
          description: Created
          headers:
            ETag: { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Quote" }
  /quotes/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    get:
      summary: Get quote
      responses:
        "200":
          description: OK
          headers:
            ETag: { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Quote" }
    put:
      summary: Update quote
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Quote" }
      responses:
        "200": { description: OK }
        "412": { description: Precondition Failed }
    delete:
      summary: Delete quote
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content }

  /orders:
    get:
      summary: List orders
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: size
          schema: { type: integer }
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count: { schema: { type: integer } }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Order" }
    post:
      summary: Create order
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Order" }
      responses:
        "201": { description: Created }
  /orders/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    get:
      summary: Get order
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Order" }
    put:
      summary: Update order
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Order" }
      responses:
        "200": { description: OK }
        "412": { description: Precondition Failed }
    delete:
      summary: Delete order
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content }
  /orders/{id}:confirm:
    post: { summary: Confirm order, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /orders/{id}:lock:
    post: { summary: Lock order, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /orders/{id}:cancel:
    post: { summary: Cancel order, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }

  /delivery-notes:
    get:
      summary: List delivery notes
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: size
          schema: { type: integer }
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count: { schema: { type: integer } }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/DeliveryNote" }
    post:
      summary: Create delivery note
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DeliveryNote" }
      responses:
        "201": { description: Created }
  /delivery-notes/{id}:deliver:
    post: { summary: Mark as delivered, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /delivery-notes/{id}:lock:
    post: { summary: Lock delivery note, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /delivery-notes/{id}:cancel:
    post: { summary: Cancel delivery note, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }

  /invoices:
    get:
      summary: List invoices
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: size
          schema: { type: integer }
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count: { schema: { type: integer } }
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Invoice" }
    post:
      summary: Create invoice
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Invoice" }
      responses:
        "201": { description: Created }
  /invoices/{id}:issue:
    post: { summary: Issue invoice, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /invoices/{id}:pay:
    post: { summary: Mark paid, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /invoices/{id}:cancel:
    post: { summary: Cancel invoice, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }

components:
  schemas:
    Resource:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        type: { type: string }
        color: { type: string }
        notes: { type: string }
    Client:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        code: { type: string }
        email: { type: string }
        phone: { type: string }
        vatNumber: { type: string }
        billingAddress: { type: string }
        shippingAddress: { type: string }
        notes: { type: string }
    Contact:
      type: object
      properties:
        id: { type: string, format: uuid }
        clientId: { type: string, format: uuid }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string }
        phone: { type: string }
        role: { type: string }
        archived: { type: boolean }
    Intervention:
      type: object
      properties:
        id: { type: string, format: uuid }
        resourceId: { type: string, format: uuid }
        resource:
          type: object
          properties:
            id: { type: string, format: uuid }
            name: { type: string }
        label: { type: string }
        color: { type: string }
        startDateTime: { type: string, format: date-time }
        endDateTime: { type: string, format: date-time }
        dateDebut: { type: string, format: date }
        dateFin: { type: string, format: date }
        status: { type: string, enum: [PLANNED, LOCKED, DONE, CANCELED] }
        clientId: { type: string, format: uuid }
    DocumentLine:
      type: object
      properties:
        designation: { type: string }
        qty: { type: number }
        unit: { type: string }
        unitPrice: { type: number }
        discountPct: { type: number }
        vatPct: { type: number }
    BaseDoc:
      type: object
      properties:
        id: { type: string, format: uuid }
        number: { type: string }
        customerName: { type: string }
        status: { type: string, enum: [DRAFT, SENT, ACCEPTED, REFUSED, CONFIRMED, DELIVERED, ISSUED, PAID, CANCELED, LOCKED] }
        version: { type: integer }
        totalHt: { type: number }
        totalVat: { type: number }
        totalTtc: { type: number }
        lines:
          type: array
          items: { $ref: "#/components/schemas/DocumentLine" }
    Quote:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"
    Order:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"
    DeliveryNote:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"
    Invoice:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"

