openapi: 3.0.3
info:
  title: Gestion Mat√©riel API
  version: "1.0.0"
servers:
  - url: /api/v1
paths:
  /quotes:
    get:
      summary: List quotes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Quote" }
    post:
      summary: Create quote
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Quote" }
      responses:
        "201":
          description: Created
          headers:
            ETag: { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Quote" }
  /quotes/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    get:
      summary: Get quote
      responses:
        "200":
          description: OK
          headers:
            ETag: { schema: { type: string } }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Quote" }
    put:
      summary: Update quote
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Quote" }
      responses:
        "200": { description: OK }
        "412": { description: Precondition Failed }
    delete:
      summary: Delete quote
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content }

  /orders:
    get:
      summary: List orders
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Order" }
    post:
      summary: Create order
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Order" }
      responses:
        "201": { description: Created }
  /orders/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: string, format: uuid }
    get:
      summary: Get order
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Order" }
    put:
      summary: Update order
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Order" }
      responses:
        "200": { description: OK }
        "412": { description: Precondition Failed }
    delete:
      summary: Delete order
      parameters:
        - in: header
          name: If-Match
          required: true
          schema: { type: string }
      responses:
        "204": { description: No Content }
  /orders/{id}:confirm:
    post: { summary: Confirm order, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /orders/{id}:lock:
    post: { summary: Lock order, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /orders/{id}:cancel:
    post: { summary: Cancel order, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }

  /delivery-notes:
    get:
      summary: List delivery notes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/DeliveryNote" }
    post:
      summary: Create delivery note
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/DeliveryNote" }
      responses:
        "201": { description: Created }
  /delivery-notes/{id}:deliver:
    post: { summary: Mark as delivered, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /delivery-notes/{id}:lock:
    post: { summary: Lock delivery note, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /delivery-notes/{id}:cancel:
    post: { summary: Cancel delivery note, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }

  /invoices:
    get:
      summary: List invoices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Invoice" }
    post:
      summary: Create invoice
      parameters:
        - in: header
          name: Idempotency-Key
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Invoice" }
      responses:
        "201": { description: Created }
  /invoices/{id}:issue:
    post: { summary: Issue invoice, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /invoices/{id}:pay:
    post: { summary: Mark paid, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }
  /invoices/{id}:cancel:
    post: { summary: Cancel invoice, responses: { "200": { description: OK }, "409": { description: Conflict }, "412": { description: Precondition Failed } } }

components:
  schemas:
    DocumentLine:
      type: object
      properties:
        designation: { type: string }
        qty: { type: number }
        unit: { type: string }
        unitPrice: { type: number }
        discountPct: { type: number }
        vatPct: { type: number }
    BaseDoc:
      type: object
      properties:
        id: { type: string, format: uuid }
        number: { type: string }
        customerName: { type: string }
        status: { type: string, enum: [DRAFT, SENT, ACCEPTED, REFUSED, CONFIRMED, DELIVERED, ISSUED, PAID, CANCELED, LOCKED] }
        version: { type: integer }
        totalHt: { type: number }
        totalVat: { type: number }
        totalTtc: { type: number }
        lines:
          type: array
          items: { $ref: "#/components/schemas/DocumentLine" }
    Quote:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"
    Order:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"
    DeliveryNote:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"
    Invoice:
      allOf:
        - $ref: "#/components/schemas/BaseDoc"

